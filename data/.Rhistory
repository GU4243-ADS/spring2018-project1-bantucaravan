source("../libs/multiplot.R")
ggplot(spooky_punc) +
geom_density_ridges(aes(pcount, author, fill = author))
ggplot(spooky_punc) +
geom_density_ridges2(aes(pcount, author, fill = author))
ggplot(spooky_punc) +
geom_density_ridges(aes(pcount, author, fill = author)) +
scale_x_log10()
?geom_density_ridges()
ggplot(spooky_punc) +
geom_density_ridges(aes(pcount, author, fill = author)) +
scale_x_log10()
ggplot(spooky_punc) +
geom_density_ridges2(aes(pcount, author, fill = author)) +
scale_x_log10()
ggplot(spooky_punc) +
geom_bar(aes(pcount, fill = author)) +
facet_wrap(~author)
ggplot(spooky_punc) +
geom_bar(aes(pcount, fill = author)) +
scale_x_log10() +
facet_wrap(~author)
?geom_density_ridges
ggplot(filter(spooky_punc, pcount >20)) +
geom_bar(aes(pcount, fill = author)) +
scale_x_log10() +
facet_wrap(~author)
ggplot(filter(spooky_punc, pcount >20)) +
geom_bar(aes(pcount, fill = author)) +
scale_x_log10() +
facet_wrap(~author, scales = "free")
ggplot(filter(spooky_punc, pcount >20)) +
geom_bar(aes(pcount, fill = author)) +
scale_x_log10() +
facet_wrap(~author, scales = "free_y")
ggplot(filter(spooky_punc, pcount >20)) +
geom_bar(aes(pcount, fill = author)) +
scale_x_log10() +
facet_wrap(~author, scales = "free_x")
ggplot(filter(spooky_punc, pcount >20)) +
geom_bar(aes(pcount, fill = author)) +
facet_wrap(~author, scales = "free_x")
ggplot(filter(spooky_punc)) +
geom_bar(aes(pcount, fill = author)) +
facet_wrap(~author, scales = "free_x")
ggplot(spooky_punc) +
geom_bar(aes(pcount, fill = author)) +
facet_wrap(~author, scales = "free_x")
ggplot(filter(spooky_punc, pcount < 20)) +
geom_bar(aes(pcount, fill = author)) +
facet_wrap(~author, scales = "free_x")
ggplot(filter(spooky_punc, pcount < 15)) +
geom_bar(aes(pcount, fill = author)) +
facet_wrap(~author, scales = "free_x")
ggplot(filter(spooky_punc, pcount < 15)) +
geom_bar(aes(pcount, fill = author)) +
facet_wrap(~author, scales = "free_x") +
labs(x = "occurences of punctuation per sentence")
spooky_com <- mutate(spooky, pcount = str_count(text,",")) %>%
select(id, author, pcount)
spooky_com
ggplot(filter(spooky_punc, pcount < 15)) +
geom_density_ridges(aes(pcount, author, fill = author)) +
scale_x_log10()
spooky_com <- mutate(spooky, pcount = str_count(text,",")) %>%
select(id, author, pcount)
ggplot(filter(spooky_com, pcount < 15)) +
geom_bar(aes(pcount, fill = author)) +
facet_wrap(~author, scales = "free_x") +
labs(x = "# of commas per sentence")
spooky_com <- mutate(spooky, pcount = str_count(text,"I")) %>%
select(id, author, pcount)
ggplot(filter(spooky_com, pcount < 15)) +
geom_bar(aes(pcount, fill = author)) +
facet_wrap(~author, scales = "free_x") +
labs(x = "# of commas per sentence")
spooky_com <- mutate(spooky, pcount = str_count(text,"I")) %>%
select(id, author, pcount)
ggplot(filter(spooky_com, pcount < 10)) +
geom_bar(aes(pcount, fill = author)) +
facet_wrap(~author, scales = "free_x") +
labs(x = "# of commas per sentence")
spooky_com <- mutate(spooky, pcount = str_count(text,"I")) %>%
select(id, author, pcount)
ggplot(filter(spooky_com, pcount < 5)) +
geom_bar(aes(pcount, fill = author)) +
facet_wrap(~author, scales = "free_x") +
labs(x = "# of commas per sentence")
spooky_com <- mutate(spooky, pcount = str_count(text,",")) %>%
select(id, author, pcount)
ggplot(filter(spooky_com, pcount < 7)) +
geom_bar(aes(pcount, fill = author)) +
facet_wrap(~author, scales = "free_x") +
labs(x = "# of commas per sentence")
spooky_punc <- mutate(spooky, pcount = str_count(text,"[[:punct:]]")) %>%
select(id, author, pcount)
ggplot(filter(spooky_punc, pcount < 7)) +
geom_bar(aes(pcount, fill = author)) +
facet_wrap(~author, scales = "free_x") +
labs(x = "occurences of punctuation per sentence")
spooky_punc <- mutate(spooky, pcount = str_count(text,"[[:punct:]]")) %>%
select(id, author, pcount)
ggplot(filter(spooky_punc, pcount < 10)) +
geom_bar(aes(pcount, fill = author)) +
facet_wrap(~author, scales = "free_x") +
labs(x = "occurences of punctuation per sentence")
?stri_trans_nfkc(str)
x <- stri_trans_nfkc(french)
head(x, 100)
?anti_join()
french <- read.table("../data/francais.txt")
#What is knitr:: command? Note this is a "setup" chunk.
knitr::opts_knit$set(root.dir = normalizePath('../'))
french <- read.table("../data/francais.txt")
french <- read.table("data/francais.txt")
length(french)
head(french)
dim(french)
english <- read.table("data/english3.txt")
names(english) <- "word"
french <- anti_join(french, english, by = "word")
head(english)
head(french)
names(french) <- "word"
french <- anti_join(french, english, by = "word")
head(french)
dim(french)
head(spooky_wrd)
spooky_fr <- inner_join(spooky_wrd, french)
spooky_fr <- inner_join(spooky_wrd, french, by = "word")
head(spooky_fr, 100)
count(spooky_fr, author)
ggplot(spooky_fr) +
geom_bar(aes(author))
ggplot(spooky_fr) +
geom_bar(aes(author, fill = author))
ggplot(spooky_fr) +
geom_bar(aes(author, fill = author)) +
labs(x = NULL)
#What is knitr:: command? Note this is a "setup" chunk.
knitr::opts_knit$set(root.dir = normalizePath('../'))
# load the libraries
library(ggplot2)
library(dplyr)
library(tibble)
library(tidyr)
library(stringr)
library(tidytext)
#library(stringi)
library(ggridges)
## What does this do?
source("../libs/multiplot.R")
#What is knitr:: command? Note this is a "setup" chunk.
knitr::opts_knit$set(root.dir = normalizePath('../'))
# load the libraries
library(ggplot2)
library(dplyr)
library(tibble)
library(tidyr)
library(stringr)
library(tidytext)
#library(stringi)
library(ggridges)
## What does this do?
source("libs/multiplot.R")
#What is knitr:: command? Note this is a "setup" chunk.
knitr::opts_knit$set(root.dir = normalizePath('../'))
# load the libraries
library(ggplot2)
library(dplyr)
library(tibble)
library(tidyr)
library(stringr)
library(tidytext)
#library(stringi)
library(ggridges)
## What does this do?
source("../libs/multiplot.R")
#What is knitr:: command? Note this is a "setup" chunk.
knitr::opts_knit$set(root.dir = normalizePath('../'))
# load the libraries
library(ggplot2)
library(dplyr)
library(tibble)
library(tidyr)
library(stringr)
library(tidytext)
#library(stringi)
library(ggridges)
## What does this do?
source("..libs/multiplot.R")
#What is knitr:: command? Note this is a "setup" chunk.
knitr::opts_knit$set(root.dir = normalizePath('../'))
# load the libraries
library(ggplot2)
library(dplyr)
library(tibble)
library(tidyr)
library(stringr)
library(tidytext)
#library(stringi)
library(ggridges)
## What does this do?
source("../libs/multiplot.R")
#What is knitr:: command? Note this is a "setup" chunk.
knitr::opts_knit$set(root.dir = normalizePath('../'))
# load the libraries
library(ggplot2)
library(dplyr)
library(tibble)
library(tidyr)
library(stringr)
library(tidytext)
#library(stringi)
library(ggridges)
## What does this do?
source("libs/multiplot.R")
#What is knitr:: command? Note this is a "setup" chunk.
knitr::opts_knit$set(root.dir = normalizePath('../'))
# load the libraries
library(ggplot2)
library(dplyr)
library(tibble)
library(tidyr)
library(stringr)
library(tidytext)
#library(stringi)
library(ggridges)
## What does this do?
source("../libs/multiplot.R")
getwd()
# read in our data --> ".." references the parent directory to the current wd
spooky <- read.csv("data/spooky.csv", as.is = TRUE)
# set author column to "factor"
## Why did we use as.factor() not factor()? would there have been a difference? A: factor() would have required creating a new object, this just converted part of our already existing object.
spooky$author <- as.factor(spooky$author)
#What is knitr:: command? Note this is a "setup" chunk.
knitr::opts_knit$set(root.dir = normalizePath('../'))
# load the libraries
library(ggplot2)
library(dplyr)
library(tibble)
library(tidyr)
library(stringr)
library(tidytext)
#library(stringi)
library(ggridges)
## What does this do?
source("libs/multiplot.R")
?source
#What is knitr:: command? Note this is a "setup" chunk.
knitr::opts_knit$set(root.dir = normalizePath('../'))
# load the libraries
library(ggplot2)
library(dplyr)
library(tibble)
library(tidyr)
library(stringr)
library(tidytext)
#library(stringi)
library(ggridges)
## What does this do?
source("libs/multiplot.R")
#What is knitr:: command? Note this is a "setup" chunk.
knitr::opts_knit$set(root.dir = normalizePath('../'))
# load the libraries
library(ggplot2)
library(dplyr)
library(tibble)
library(tidyr)
library(stringr)
library(tidytext)
#library(stringi)
library(ggridges)
## What does this do?
source("../libs/multiplot.R")
# read in our data --> ".." references the parent directory to the current wd
spooky <- read.csv("data/spooky.csv", as.is = TRUE)
# set author column to "factor"
## Why did we use as.factor() not factor()? would there have been a difference? A: factor() would have required creating a new object, this just converted part of our already existing object.
spooky$author <- as.factor(spooky$author)
# read in our data --> ".." references the parent directory to the current wd
spooky <- read.csv("../data/spooky.csv", as.is = TRUE)
# read in our data --> ".." references the parent directory to the current wd
spooky <- read.csv("data/spooky.csv", as.is = TRUE)
# set author column to "factor"
## Why did we use as.factor() not factor()? would there have been a difference? A: factor() would have required creating a new object, this just converted part of our already existing object.
spooky$author <- as.factor(spooky$author)
# tokenize by word. I didn't include the elimination of the stop words because for tf_idf they will be irrelevant.
spooky_wrd <- unnest_tokens(spooky, word, text)
# This eliminates the most frequent by contexually insignificant words --> removes rows of spooky_wrd that match in column word with the stopwords list.
spooky_wrd <- anti_join(spooky_wrd, stop_words, by = "word")
spooky_wrd
head(spooky_wrd)
?wilcox.test()
ggplot(filter(spooky_com, pcount < 7)) +
geom_boxplot(aes(pcount, fill = author)) +
facet_wrap(~author, scales = "free_x") +
labs(x = "# of commas per sentence")
spooky_em <- inner_join(spooky_wrd, get_sentiments("affin"))
spooky_em <- inner_join(spooky_wrd, get_sentiments("afinn"))
head(spooky_em)
arrange(spooky_em, word)
head(arrange(spooky_em, word))
spooky_em <- inner_join(spooky_wrd, get_sentiments("afinn"), by = "word")
x <- group_by(spooky_em, author) %>%
summarise(sum = sum(abs(score)))
x
simple <- group_by(spooky_em, author) %>%
summarise(sum = sum(abs(score)))
ggplot(simple) +
geom_col(aes(author, sum, fill = author)) +
labs(x = "Emotional Intensity")
x <- group_by(spooky_em, author) %>%
?abs()
?abs()
x <- group_by(spooky_em, id) %>%
summarise(sum(abs(score)))
head(x)
head(arrange(x,id))
head(spooky_em)
head(arrange(spooky_em,id))
head(arrange(spooky_wrd,id))
dim(spooky_wrd)
dim(spooky_em)
dim(x)
head(x)
neg <- group_by(spooky_em, id) %>%
summarise(neg = sum(filter(score < 0))
d
neg <- group_by(spooky_em, id) %>%
summarise(neg = sum(filter(score < 0))
d
neg <- group_by(spooky_em, id) %>%
filter(score < 0)
summarise(neg = sum(score))
neg <- group_by(spooky_em, id) %>%
filter(score < 0) %>%
summarise(neg = sum(score))
head(neg)
arrange(neg, neg)
dim(neg)
pos <- group_by(spooky_em, id) %>%
filter(score > 0) %>%
summarise(pos = sum(score))
pos
dim(pos)
arrange(pos, pos)
arrange(pos, desc(pos)
s
arrange(pos, desc(pos))
levels(spooky_em$id)
length(spooky$id)
length(spooky_em$id)
length(em)
em <- group_by(spooky_em, id) %>%
summarise(em = sum(abs(score)))
neg <- group_by(spooky_em, id) %>%
filter(score < 0) %>%
summarise(neg = sum(score))
pos <- group_by(spooky_em, id) %>%
filter(score > 0) %>%
summarise(pos = sum(score))
length(em)
dim(em)
length(unique(spooky_em$id))
head(em)
head(pos)
pos
?left_join()
sentence_em <- left_join(em, neg, by = "id") %>%
left_join(pos, by = "id")
sentence_em
ggplot(sentence_em) +
l
ggplot(sentence_em, aes(x = em)) +
geom_histogram(binwidth = 5)
?right_join()
head
head(spooky_wrd)
?summarise()
em <- group_by(spooky_em, id) %>%
summarise(em = sum(abs(score)), author = author)
em <- group_by(spooky_em, id) %>%
summarise(em = sum(abs(score))) %>%
semi_join(select(spooky_wrd, id, author), by = "id")
neg <- group_by(spooky_em, id) %>%
filter(score < 0) %>%
summarise(neg = sum(score))
pos <- group_by(spooky_em, id) %>%
filter(score > 0) %>%
summarise(pos = sum(score))
sentence_em <- left_join(em, neg, by = "id") %>%
left_join(pos, by = "id")
left_join(pos, by = "id")
head(sentence_em)
sentence_em
em <- group_by(spooky_em, id) %>%
summarise(em = sum(abs(score))) %>%
semi_join(select(spooky_wrd, id, author), by = "id")
em
em <- group_by(spooky_em, id) %>%
summarise(em = sum(abs(score)))
em <- semi_join(select(spooky_wrd, id, author), by = "id")
em <- semi_join(em, select(spooky_wrd, id, author), by = "id")
em
left_join()
?left_join()
em <- group_by(spooky_em, id) %>%
summarise(em = sum(abs(score)))
em <- inner_join(select(spooky_wrd, id, author), em, by = "id")
em
em <- group_by(spooky_em, id) %>%
summarise(em = sum(abs(score)))
em <- inner_join(em, select(spooky_wrd, id, author), by = "id")
em
em <- group_by(spooky_em, id) %>%
summarise(em = sum(abs(score)))
em <- semi_join(em, select(spooky_wrd, id, author), by = "id")
em
head(unique(group_by(spooky_wrd,id)))
dim(unique(group_by(spooky_wrd,id)))
dim(unique(group_by(spooky_em,id)))
x <- select(spooky_wrd, id, author)
x <- unique(group_by(x,id))
dim(x)
dim(em)
x <- select(spooky_em, id, author)
x <- unique(group_by(x,id))
dim(x)
em <- group_by(spooky_em, id) %>%
summarise(em = sum(abs(score)))
x <- select(spooky_em, id, author)
x <- unique(group_by(x,id))
em <- left_join(em, x, by = "id")
em
# a look at the frequency of different emotional intensities by author
em <- group_by(spooky_em, id) %>%
summarise(em = sum(abs(score)))
# adding author row to em
x <- select(spooky_em, id, author)
x <- unique(group_by(x,id))
em <- left_join(em, x, by = "id")
neg <- group_by(spooky_em, id) %>%
filter(score < 0) %>%
summarise(neg = sum(score))
pos <- group_by(spooky_em, id) %>%
filter(score > 0) %>%
summarise(pos = sum(score))
sentence_em <- left_join(em, neg, by = "id") %>%
left_join(pos, by = "id")
# plotting
ggplot(sentence_em, aes(x = em)) +
geom_histogram(binwidth = 5, fill)
# plotting
ggplot(sentence_em, aes(x = em)) +
geom_histogram( aes(binwidth = 5, fill = author))
em <- group_by(spooky_em, id) %>%
summarise(em = sum(abs(score)))
x <- select(spooky_em, id, author)
x <- unique(group_by(x,id))
em <- left_join(em, x, by = "id")
ggplot(sentence_em, aes(x = em)) +
geom_histogram( aes(fill = author), binwidth = 5)
ggplot(sentence_em, aes(x = em)) +
geom_histogram( aes(fill = author), binwidth = 1)
ggplot(sentence_em, aes(x = em)) +
geom_histogram( aes(fill = author), binwidth = 1) +
facet_wrap(~author)
?geom_histogram()
arrange(sentence_em, desc(em))
ggplot(sentence_em, aes(x = em)) +
geom_histogram( aes(fill = author), binwidth = 1) +
facet_wrap(~author)
?geom_histogram()
ggplot(filter(sentence_em, em < 41), aes(x = em)) +
geom_histogram( aes(fill = author), binwidth = 1) +
facet_wrap(~author)
ggplot(filter(sentence_em, em < 41), aes(x = em)) +
geom_histogram( aes(fill = author), binwidth = 1) +
facet_wrap(~author) +
scale_x_log10()
ggplot(filter(sentence_em, em < 41), aes(x = em)) +
geom_histogram( aes(fill = author), binwidth = 1) +
facet_wrap(~author)
arrange(sentence_em, desc(em))
ggplot(sentence_em, aes(x = em)) +
geom_bar(aes(fill = author)) +
coord_flip()
arrange(filter(sentence_em, em < 41), desc(em))
ggplot(sentence_em, aes(x = em)) +
geom_bar(aes(fill = author)) +
coord_flip()
?top_n()
t <- top_n(sentence_em, 30, em)
arrange(t, desc(em))
ggplot(sentence_em, aes(x = em)) +
geom_bar(aes(fill = author)) +
coord_flip()
view(head(arrange(sentence_em, desc(em)),100)
s
view(head(arrange(sentence_em, desc(em)),100)
l
view(head(arrange(sentence_em, desc(em))),100)
view(head(arrange(sentence_em, desc(em)),100))
# plotting
ggplot(filter(sentence_em, em < 41), aes(x = em)) +
geom_histogram( aes(fill = author), binwidth = 1) +
facet_wrap(~author)
ggplot(filter(sentence_em, em < 30), aes(x = em)) +
geom_histogram( aes(fill = author), binwidth = 1) +
facet_wrap(~author)
